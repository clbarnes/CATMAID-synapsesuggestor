# -*- coding: utf-8 -*-
# Generated by Django 1.10.7 on 2017-05-31 17:37
from __future__ import unicode_literals

import django.contrib.gis.db.models.fields
from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):
    initial = True

    dependencies = [
        ('catmaid', '0022_add_reconstruction_sampler_tables'),
    ]

    operations = [
        migrations.CreateModel(
            name='ProjectSynapseSuggestionWorkflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('project', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catmaid.Project')),
            ],
            options={
                'db_table': 'project_synapse_suggestion_workflow',
            },
        ),
        migrations.CreateModel(
            name='SynapseAssociationAlgorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashcode', models.CharField(db_index=True, max_length=64)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'synapse_association_algorithm',
            },
        ),
        migrations.CreateModel(
            name='SynapseDetectionAlgorithm',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hashcode', models.CharField(db_index=True, max_length=64)),
                ('date', models.DateTimeField(auto_now_add=True)),
                ('notes', models.TextField(blank=True)),
            ],
            options={
                'db_table': 'synapse_detection_algorithm',
            },
        ),
        migrations.CreateModel(
            name='SynapseDetectionTile',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('x_tile_idx', models.IntegerField(db_index=True)),
                ('y_tile_idx', models.IntegerField(db_index=True)),
                ('z_tile_idx', models.IntegerField(db_index=True)),
            ],
            options={
                'db_table': 'synapse_detection_tile',
            },
        ),
        migrations.CreateModel(
            name='SynapseDetectionTiling',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('tile_height_px', models.IntegerField(default=512)),
                ('tile_width_px', models.IntegerField(default=512)),
                ('stack', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catmaid.Stack')),
            ],
            options={
                'db_table': 'synapse_detection_tiling',
            },
        ),
        migrations.CreateModel(
            name='SynapseImageStore',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
        ),
        migrations.CreateModel(
            name='SynapseObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'db_table': 'synapse_object',
            },
        ),
        migrations.CreateModel(
            name='SynapseSlice',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('convex_hull_2d', django.contrib.gis.db.models.fields.PolygonField(srid=4326)),
                ('size_px', models.IntegerField()),
                ('xs_centroid', models.IntegerField(verbose_name='x coord of centroid in stack coordinates')),
                ('ys_centroid', models.IntegerField(verbose_name='y coord of centroid in stack coordinates')),
                ('uncertainty', models.FloatField(null=True)),
                ('synapse_detection_tile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                             to='synapsesuggestor.SynapseDetectionTile')),
            ],
            options={
                'db_table': 'synapse_slice',
            },
        ),
        migrations.CreateModel(
            name='SynapseSliceSynapseObject',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synapse_object',
                 models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='synapsesuggestor.SynapseObject')),
                ('synapse_slice',
                 models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='synapsesuggestor.SynapseSlice')),
            ],
            options={
                'db_table': 'synapse_slice_synapse_object',
            },
        ),
        migrations.CreateModel(
            name='SynapseSliceTreenode',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('contact_px',
                 models.IntegerField(verbose_name='Size in pixels of 1D contact area between neuron and synapse')),
                ('synapse_association_algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                                    to='synapsesuggestor.SynapseAssociationAlgorithm')),
                ('synapse_slice', models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE,
                                                    to='synapsesuggestor.SynapseSlice')),
                ('treenode', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='catmaid.Treenode')),
            ],
            options={
                'db_table': 'synapse_slice_treenode',
            },
        ),
        migrations.CreateModel(
            name='SynapseSuggestionWorkflow',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('synapse_detection_algorithm', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                                  to='synapsesuggestor.SynapseDetectionAlgorithm')),
                ('synapse_detection_tiling', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                                               to='synapsesuggestor.SynapseDetectionTiling')),
                ('synapse_image_store',
                 models.OneToOneField(default=None, null=True, on_delete=django.db.models.deletion.CASCADE,
                                      to='synapsesuggestor.SynapseImageStore')),
            ],
            options={
                'db_table': 'synapse_suggestion_workflow',
            },
        ),
        migrations.AddField(
            model_name='synapsedetectiontile',
            name='synapse_suggestion_workflow',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    to='synapsesuggestor.SynapseSuggestionWorkflow'),
        ),
        migrations.AddField(
            model_name='projectsynapsesuggestionworkflow',
            name='synapse_association_algorithm',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    to='synapsesuggestor.SynapseAssociationAlgorithm'),
        ),
        migrations.AddField(
            model_name='projectsynapsesuggestionworkflow',
            name='synapse_suggestion_workflow',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE,
                                    to='synapsesuggestor.SynapseSuggestionWorkflow'),
        ),
        migrations.AlterUniqueTogether(
            name='synapsesuggestionworkflow',
            unique_together=set([('synapse_detection_tiling', 'synapse_detection_algorithm')]),
        ),
        migrations.AlterUniqueTogether(
            name='synapsedetectiontiling',
            unique_together=set([('stack', 'tile_height_px', 'tile_width_px')]),
        ),
        migrations.AlterUniqueTogether(
            name='synapsedetectiontile',
            unique_together=set([('synapse_suggestion_workflow', 'x_tile_idx', 'y_tile_idx', 'z_tile_idx')]),
        ),
        migrations.RunSQL(
            "CREATE INDEX IF NOT EXISTS synapse_slice_convex_hull_2d ON synapse_slice USING GIST (convex_hull_2d);",
            """		
               SELECT setval(		
                 'synapse_slice_id_seq',(		
                   SELECT GREATEST(MAX(id)+1, nextval('synapse_slice_id_seq')) FROM synapse_slice		
                 )		
               );		
            """
        ),
    ]
